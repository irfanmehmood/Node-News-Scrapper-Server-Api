const feedparser = require('feedparser-promised');
var axios = require('axios');
const textUtil = require('./textUtil.js');
const dbUtil = require('./db.js');
const chromeUserAgentsList = require('../data/user-agents/chrome.js');
const ieUserAgentsList = require('../data/user-agents/ie.js');
const userAgents = ieUserAgentsList.concat(chromeUserAgentsList);
const gifyApiKey_public = 'dc6zaTOxFJmzC';
const gifyApiKey = '45jlwc7iV1JGH6XzIDMln1Bl463i8h8W';


/**
 * Utility Class to do all our RSS, and Gifi Fetch
 */

let scrapper_mod = () => {


    var processFeedsRecursive_CallBack = processFeedsRecursive_CB;
    var FeedItemsParent = FeedLinkObject;
    var wait = 1000;
    let FetchedFeedItemsList;
    var FormattedFeedItemsList = [];
    let FetchedFeedItemsListCounter = 0;
    var hrLine = "-------------------------------------------------------------";


    /**
     * 
     * Recursive method calls itself
     */
    function processSingleFeedItemRecursive() {

        let feedItem = FetchedFeedItemsList[FetchedFeedItemsListCounter];

        /**
         *  If we have an Item with Unwanted Title, we skip this recursive turn 
         * */
        //console.log(textUtil.getIgnoreBBCTitles());
        //process.exit(0);
        /*
        if (textUtil.getIgnoreBBCTitles().includes(feedItem.title.toLowerCase())) {
            FetchedFeedItemsListCounter = FetchedFeedItemsListCounter + 1;
            console.log('Found Title which is ignored');
            processSingleFeedItemRecursive();
        }
        */


        textUtil.setText(`${feedItem.title} ${feedItem.description}`);
        let keyword = textUtil.getLongestWords();

        if (FetchedFeedItemsListCounter === (FetchedFeedItemsList.length - 1)) {

            var redis  = require("redis"), 
            client = redis.createClient();
            client.set(`news-${FeedItemsParent.slug}`, JSON.stringify(FormattedFeedItemsList));
            client.expire(`news-${FeedItemsParent.slug}`, 2*60*60);
            FetchedFeedItemsListCounter = 0;
            console.log(`Done: [${FeedItemsParent.name.toUpperCase()} >> ${FeedItemsParent.url}]`);
            console.log(hrLine);
            processFeedsRecursive_CallBack();

            //process.exit();
        } else {

            dbUtil.getGifyImages(keyword).then((result) => {

                /** 
                 * We do not have any images for this Keyword 
                 * Fetch it from Gify API*/
                if (result.length === 0) {
                    console.log(`${keyword} Image does not exist, getting from API`);
                    console.log(hrLine);
                    aSyncGetGifyImagesFromApi(keyword)
                    .then((result) => {

                        /** We found some images from gify */
                        if (result.data.data.length > 0) {

                            /** Add nely formated item to formatted list */

                            let imageString = result.data.data[0].images.fixed_height_still.url;


                            let image1 = imageString.substring(0, imageString.indexOf('?'));

                            imageString = result.data.data[1] ? result.data.data[1].images.fixed_height_still.url : imageString;
                            let image2 = imageString.substring(0, imageString.indexOf('?'));

                            imageString = result.data.data[2] ? result.data.data[2].images.fixed_height_still.url : imageString;
                            let image3 = imageString.substring(0, imageString.indexOf('?'));

                            imageString = result.data.data[0] ? result.data.data[0].images.preview_gif.url : imageString;
                            let animGif = imageString.substring(0, imageString.indexOf('?'));


                            let newFormatedItem = {
                                link: feedItem.link,
                                title: feedItem.title,
                                description: feedItem.description,
                                pubDate: feedItem.pubDate,
                                keyword: keyword,
                                image1: image1,
                                image2: image2,
                                image3: image3,
                                animGif: animGif
                            }
                            FormattedFeedItemsList.push(newFormatedItem);
                            
                            /** Add New Gify Images to the Database */
                            dbUtil.addGifyImages(
                                {
                                    keyword: newFormatedItem.keyword,
                                    image1: newFormatedItem.image1,
                                    image2: newFormatedItem.image2,
                                    image3: newFormatedItem.image3,
                                    animGif: newFormatedItem.animGif
                                }

                            );

                            /*
                            console.log(newFormatedItem.image1);
                            console.log(newFormatedItem.image2);
                            console.log(newFormatedItem.image3);
                            console.log(hrLine);
                            */
                        } else {
                            console.log(`${keyword} no images found on getty, 'Add to igoner list ?`);
                            console.log(hrLine);
                        }
                        
                        FetchedFeedItemsListCounter = FetchedFeedItemsListCounter + 1;
                        setTimeout(() => { 
                            processSingleFeedItemRecursive();
                        }, wait);
                    })
                    .catch((error) => {
                        console.log(error);
                        FetchedFeedItemsListCounter = FetchedFeedItemsListCounter + 1;
                        setTimeout(() => { 
                            processSingleFeedItemRecursive();
                        }, wait);
                    });

                } else {
                    //console.log(`${keyword} Image exists, getting from DB`);
                    /** Add formated item to formatted list */
                    let newFormatedItem = {
                        link: feedItem.link,
                        title: feedItem.title,
                        description: feedItem.description,
                        pubDate: feedItem.pubDate,
                        keyword: result[0].keyword,
                        image1: result[0].image1,
                        image2: result[0].image2,
                        image3: result[0].image3,
                        animGif: result[0].animGif
                    }
                    FormattedFeedItemsList.push(newFormatedItem);
                    FetchedFeedItemsListCounter = FetchedFeedItemsListCounter + 1;
                    processSingleFeedItemRecursive();
                }
            });
        }

    }

    async function aSyncGetGifyImagesFromApi(keyword, HowMany = 3) {
        /** Get our random User agent to fire Axios Gify API request */
        const url = `https://api.giphy.com/v1/gifs/search?api_key=${gifyApiKey_public}&q=${keyword}&limit=${HowMany}&offset=0&rating=G&lang=en`;
        const random = Math.floor((Math.random() * userAgents.length) + 1);
        const config = {
            method: 'get',
            url: url,
            headers: { 'User-Agent': userAgents[random].ua }
        }
        
        return await axios(config);
    }

    function get_url_feed_items(url) {
        return feedparser.parse(url);
    }
    
    return {
        processSingleFeedItemRecursive,
        get_url_feed_items
    }

};

/** Singleton pattern */
module.exports = scrapper_mod;